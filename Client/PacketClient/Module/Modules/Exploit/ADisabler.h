#pragma once
#pragma once
#include "../../ModuleManager.h"
#include "../Module.h"
class ADisabler : public IModule {
private:
	bool packetLook = false;
	int angle = 270;
	bool onlyOnBuildMods = true;
	bool pauseOnXP = true;
	bool pauseOnBow = true;
	bool pauseOnMine = true;
public:
	SettingEnum Server;
	ADisabler() : IModule(0x0, Category::EXPLOIT, "Disable Anticheat Lul") {
		Server = SettingEnum(this)
			.addEntry(EnumEntry("CPVP", 0))
			.addEntry(EnumEntry("CubeCraft", 1));
		registerEnumSetting("Server", &Server, 0);
		registerIntSetting("Angle", &this->angle, this->angle, -360, 360);
		registerBoolSetting("On Mod w/ build", &this->onlyOnBuildMods, this->onlyOnBuildMods);
		registerBoolSetting("Pause On XP", &this->pauseOnXP, this->pauseOnXP);
		registerBoolSetting("Pause On Bow", &this->pauseOnBow, this->pauseOnBow);
		registerBoolSetting("Pause On Mine", &this->pauseOnMine, this->pauseOnMine);
		registerBoolSetting("ThirdBypass", &this->isForceThird, this->isForceThird);
		registerBoolSetting("HeadCheck", &this->checkhead, this->checkhead);
	};
	~ADisabler() {};
	bool isForceThird = false;
	bool checkhead = false;
	bool sb = false;
	vec2_t windowSize = g_Data.getClientInstance()->getGuiData()->windowSize;
	float releaseX = 7.5;
	float releaseY = 30;
	float armorX = 5;
	float armorY = 30;
	virtual const char* getModuleName() override {
		return "ADisabler";
	}
	const char* ADisabler::getModName() {
		if (Server.selected == 0)
			return " [CPVP]";
		if (Server.selected == 1)
			return " [CubeCraft]";
	}
	virtual void onPlayerTick(C_Player* plr);
	virtual void onPostRender(C_MinecraftUIRenderContext* renderCtx);
	virtual void onSendPacket(C_Packet* packet);
};